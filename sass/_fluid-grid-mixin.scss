@mixin fluid-grid($gridColumns: 24, $gridGutterWidth: 20px, $includeResponsive: true, $name: '') {
	@if $name == '' {
		$name: 'row-fluid-' + $gridColumns;
	}

	// Default 940px grid
	$gridGutterWidth:         $gridGutterWidth;
	$gridColumnWidth:         (940px - (($gridColumns - 1) * $gridGutterWidth)) / $gridColumns !default;
	$gridRowWidth:            ($gridColumns * $gridColumnWidth) + ($gridGutterWidth * ($gridColumns - 1)) !default;

	// 1200px min
	$gridGutterWidth1200:     $gridGutterWidth;
	$gridColumnWidth1200:     (1200px - (($gridColumns - 1) * $gridGutterWidth1200)) / $gridColumns !default;
	$gridRowWidth1200:        ($gridColumns * $gridColumnWidth1200) + ($gridGutterWidth1200 * ($gridColumns - 1)) !default;
 
	// 768px-979px
	$gridGutterWidth768:      $gridGutterWidth;
	$gridColumnWidth768:      (768px - (($gridColumns - 1) * $gridGutterWidth768)) / $gridColumns !default;
	$gridRowWidth768:         ($gridColumns * $gridColumnWidth768) + ($gridGutterWidth768 * ($gridColumns - 1)) !default;

	// Fluid grid
	$fluidGridColumnWidth:    percentage($gridColumnWidth/$gridRowWidth) !default;
	$fluidGridGutterWidth:    percentage($gridGutterWidth/$gridRowWidth) !default;
 
	// 1200px min
	$fluidGridColumnWidth1200:     percentage($gridColumnWidth1200/$gridRowWidth1200) !default;
	$fluidGridGutterWidth1200:     percentage($gridGutterWidth1200/$gridRowWidth1200) !default;
 
	// 768px-979px
	$fluidGridColumnWidth768:      percentage($gridColumnWidth768/$gridRowWidth768) !default;
	$fluidGridGutterWidth768:      percentage($gridGutterWidth768/$gridRowWidth768) !default;

	.#{$name} {
		width: 100%;
		*zoom: 1;
		  &:before,
		  &:after {
			display: table;
			content: "";
			line-height: 0;
		  }
		  &:after {
			clear: both;
		  }
		& > [class*="span"] {
			display: block;
			  width: 100%;
			  min-height: 30px; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
			  -webkit-box-sizing: border-box; // Makes inputs behave like true block-level elements
				 -moz-box-sizing: border-box; // Makes inputs behave like true block-level elements
					  box-sizing: border-box; // Makes inputs behave like true block-level elements
			float: left;
			margin-left: $fluidGridGutterWidth;
			*margin-left: $fluidGridGutterWidth - (.5 / $gridRowWidth * 100px * 1%);
		}
		& > [class*="span"]:first-child {
			margin-left: 0;
		}

		// Space grid-sized controls properly if multiple per line
		.controls-row [class*="span"] + [class*="span"] {
			margin-left: $fluidGridGutterWidth;
		}

		// generate .spanX and .offsetX
		$columns: $gridColumns;
		@while $columns > 0 {
			& > .span#{$columns} { 
				width: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1));
				*width: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) - (.5 / $gridRowWidth * 100px * 1%);
			}
			$columns: $columns - 1;
		}

		$columns: $gridColumns;
		@while $columns > 0 {
			& > .offset#{$columns} { 
				margin-left: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) + ($fluidGridGutterWidth * 2);
				*margin-left: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) - (.5 / $gridRowWidth * 100px * 1%) + ($fluidGridGutterWidth * 2) - (.5 / $gridRowWidth * 100px * 1%); 
			}
			& > .offset#{$columns}:first-child { 
				margin-left: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) + ($fluidGridGutterWidth);
				*margin-left: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) - (.5 / $gridRowWidth * 100px * 1%) + $fluidGridGutterWidth - (.5 / $gridRowWidth * 100px * 1%); 
			}
			$columns: $columns - 1;
		  }
	 }



	.#{$name} [class*="span"].hide {
		display: none;
	}

	.#{$name} [class*="span"].pull-right {
		float: right;
	}

	.#{$name} input[class*="span"],
	.#{$name} select[class*="span"],
	.#{$name} textarea[class*="span"],
	.#{$name} .uneditable-input[class*="span"] {
		float: none;
		margin-left: 0;
	}

	.#{$name} input[class*="span"],
	.#{$name} select[class*="span"],
	.#{$name} textarea[class*="span"],
	.#{$name} .uneditable-input[class*="span"],
	.#{$name} .input-prepend [class*="span"],
	.#{$name} .input-append [class*="span"] {
		display: inline-block;
	}

	.#{$name} .controls-row [class*="span"] {
		float: left;
	}

	.#{$name} table td[class*="span"],
	.#{$name} table th[class*="span"] {
		display: table-cell;
		float: none;
		margin-left: 0;
	}

	.#{$name} .thumbnails {
		margin-left: 0;
	}



	@if $includeResponsive {
		@media (min-width: 1200px) {
			.#{$name} {
				width: 100%;
				*zoom: 1;
				  &:before,
				  &:after {
					display: table;
					content: "";
					line-height: 0;
				  }
				  &:after {
					clear: both;
				  }
				& > [class*="span"] {
					display: block;
					  width: 100%;
					  min-height: 30px; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
					  -webkit-box-sizing: border-box; // Makes inputs behave like true block-level elements
						 -moz-box-sizing: border-box; // Makes inputs behave like true block-level elements
							  box-sizing: border-box; // Makes inputs behave like true block-level elements
					float: left;
					margin-left: $fluidGridGutterWidth1200;
					*margin-left: $fluidGridGutterWidth1200 - (.5 / $gridRowWidth1200 * 100px * 1%);
				}
				& > [class*="span"]:first-child {
					margin-left: 0;
				}

				// Space grid-sized controls properly if multiple per line
				.controls-row [class*="span"] + [class*="span"] {
					margin-left: $fluidGridGutterWidth1200;
				}

				// generate .spanX and .offsetX
				$columns: $gridColumns;
				@while $columns > 0 {
					& > .span#{$columns} { 
						width: ($fluidGridColumnWidth1200 * $columns) + ($fluidGridGutterWidth1200 * ($columns - 1));
						*width: ($fluidGridColumnWidth1200 * $columns) + ($fluidGridGutterWidth1200 * ($columns - 1)) - (.5 / $gridRowWidth1200 * 100px * 1%);
					}
					$columns: $columns - 1;
				}

				$columns: $gridColumns;
				@while $columns > 0 {
					& > .offset#{$columns} { 
						margin-left: ($fluidGridColumnWidth1200 * $columns) + ($fluidGridGutterWidth1200 * ($columns - 1)) + ($fluidGridGutterWidth1200 * 2);
						*margin-left: ($fluidGridColumnWidth1200 * $columns) + ($fluidGridGutterWidth1200 * ($columns - 1)) - (.5 / $gridRowWidth1200 * 100px * 1%) + ($fluidGridGutterWidth1200 * 2) - (.5 / $gridRowWidth1200 * 100px * 1%); 
					}
					& > .offset#{$columns}:first-child { 
						margin-left: ($fluidGridColumnWidth1200 * $columns) + ($fluidGridGutterWidth1200 * ($columns - 1)) + ($fluidGridGutterWidth1200);
						*margin-left: ($fluidGridColumnWidth1200 * $columns) + ($fluidGridGutterWidth1200 * ($columns - 1)) - (.5 / $gridRowWidth1200 * 100px * 1%) + $fluidGridGutterWidth1200 - (.5 / $gridRowWidth1200 * 100px * 1%); 
					}
					$columns: $columns - 1;
				  }
			 }
		}

		@media (min-width: 768px) and (max-width: 979px) {
			.#{$name} {
				width: 100%;
				*zoom: 1;
				  &:before,
				  &:after {
					display: table;
					content: "";
					line-height: 0;
				  }
				  &:after {
					clear: both;
				  }
				& > [class*="span"] {
					display: block;
					  width: 100%;
					  min-height: 30px; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
					  -webkit-box-sizing: border-box; // Makes inputs behave like true block-level elements
						 -moz-box-sizing: border-box; // Makes inputs behave like true block-level elements
							  box-sizing: border-box; // Makes inputs behave like true block-level elements
					float: left;
					margin-left: $fluidGridGutterWidth768;
					*margin-left: $fluidGridGutterWidth768 - (.5 / $gridRowWidth768 * 100px * 1%);
				}
				& > [class*="span"]:first-child {
					margin-left: 0;
				}

				// Space grid-sized controls properly if multiple per line
				.controls-row [class*="span"] + [class*="span"] {
					margin-left: $fluidGridGutterWidth768;
				}

				// generate .spanX and .offsetX
				$columns: $gridColumns;
				@while $columns > 0 {
					& > .span#{$columns} { 
						width: ($fluidGridColumnWidth768 * $columns) + ($fluidGridGutterWidth768 * ($columns - 1));
						*width: ($fluidGridColumnWidth768 * $columns) + ($fluidGridGutterWidth768 * ($columns - 1)) - (.5 / $gridRowWidth768 * 100px * 1%);
					}
					$columns: $columns - 1;
				}

				$columns: $gridColumns;
				@while $columns > 0 {
					& > .offset#{$columns} { 
						margin-left: ($fluidGridColumnWidth768 * $columns) + ($fluidGridGutterWidth768 * ($columns - 1)) + ($fluidGridGutterWidth768 * 2);
						*margin-left: ($fluidGridColumnWidth768 * $columns) + ($fluidGridGutterWidth768 * ($columns - 1)) - (.5 / $gridRowWidth768 * 100px * 1%) + ($fluidGridGutterWidth768 * 2) - (.5 / $gridRowWidth768 * 100px * 1%); 
					}
					& > .offset#{$columns}:first-child { 
						margin-left: ($fluidGridColumnWidth768 * $columns) + ($fluidGridGutterWidth768 * ($columns - 1)) + ($fluidGridGutterWidth768);
						*margin-left: ($fluidGridColumnWidth768 * $columns) + ($fluidGridGutterWidth768 * ($columns - 1)) - (.5 / $gridRowWidth768 * 100px * 1%) + $fluidGridGutterWidth768 - (.5 / $gridRowWidth768 * 100px * 1%); 
					}
					$columns: $columns - 1;
				  }
			 }
		}

		@media (max-width: 767px) {		
			.#{$name} {
				& > [class^="span"],
				& > [class*=" span"] {
					display: block;
					float: none;
					width: 100%;
					margin-left: 0;
					-webkit-box-sizing: border-box;
					-moz-box-sizing: border-box;
					box-sizing: border-box;
				}
				& > .span12 {
					width: 100%;
					-webkit-box-sizing: border-box;
					-moz-box-sizing: border-box;
					box-sizing: border-box;
				}
				& > [class^="offset"]:first-child,
				& > [class*=" offset"]:first-child, {
					margin-left: 0;
				}
			}
		}
	}	
}